{"version":3,"sources":["Todo.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","List","ListItem","ListItemAvatar","ListItemText","primary","text","secondary","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todo","setTodo","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","console","log","docs","map","doc","data","className","FormControl","InputLabel","Input","value","onChange","event","target","Button","disabled","variant","type","onClick","add","timestamp","FieldValue","serverTimestamp","preventDefault","color","element","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kXAeeA,MAXf,SAAcC,GACb,OACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAcC,QAASL,EAAMM,KAAMC,UAAU,gB,iBCMlCC,EAZKC,IAASC,cAAc,CAC1CC,OAAQ,0CACRC,WAAY,4CACZC,YAAa,mDACbC,UAAW,4BACXC,cAAe,wCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEOC,YC4DRC,MAlEf,WAAe,MAKUC,mBAAS,IALnB,mBAKPC,EALO,KAKDC,EALC,OAMYF,mBAAS,IANrB,mBAMPG,EANO,KAMAC,EANA,KAwCd,OA/BAC,qBAAU,WAETlB,EAAGmB,WAAW,YACZC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GAKZC,QAAQC,IAAIF,EAASG,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,OAAOd,SAClDC,EAAQO,EAASG,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,OAAOd,eAsBhD,yBAAKe,UAAU,OACd,sDAEA,8BAEC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CAAOC,MAAOjB,EAAOkB,SAAU,SAACC,GAAD,OAAWlB,EAASkB,EAAMC,OAAOH,WAIjE,kBAACI,EAAA,EAAD,CAAQC,UAAWtB,EAAOuB,QAAQ,YAAYC,KAAK,SAASC,QA5B/C,SAACN,GAMhBnC,EAAGmB,WAAW,YAAYuB,IAAI,CAC7B5B,KAAME,EACN2B,UAAW1C,IAASU,UAAUiC,WAAWC,oBAG1CV,EAAMW,iBAEN7B,EAAS,KAeuE8B,MAAM,WAApF,aAKD,4BACEjC,EAAKY,KAAI,SAACsB,GAAD,OACT,kBAAC,EAAD,CAAMlD,KAAMkD,UCtDGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.a26f5e2d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { List, ListItem, ListItemText, ListItemAvatar } from '@material-ui/core';\r\nimport \"./Todo.css\"\r\n\r\nfunction Todo(props) {\r\n\treturn (\r\n\t\t<List>\r\n\t\t\t<ListItem>\r\n\t\t\t\t<ListItemAvatar></ListItemAvatar>\r\n\t\t\t\t<ListItemText primary={props.text} secondary=\"Added...\" />\r\n\t\t\t</ListItem>\r\n\t\t</List>\r\n\t);\r\n}\r\n\r\nexport default Todo;\r\n","import firebase from 'firebase';\r\n\r\n// like this we can connect to the back end , its like the key to the back end\r\nconst firebaseApp = firebase.initializeApp({\r\n\tapiKey: 'AIzaSyCSEK7eEvFAQKW9pLislc3qqho5z5UGMb8',\r\n\tauthDomain: 'todo-app-with-react-15bc3.firebaseapp.com',\r\n\tdatabaseURL: 'https://todo-app-with-react-15bc3.firebaseio.com',\r\n\tprojectId: 'todo-app-with-react-15bc3',\r\n\tstorageBucket: 'todo-app-with-react-15bc3.appspot.com',\r\n\tmessagingSenderId: '347671042450',\r\n\tappId: '1:347671042450:web:d7e66f6d5736969321494b',\r\n\tmeasurementId: 'G-09TSCCGKTM',\r\n});\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport Todo from './Todo';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n\t// the todo in the below state is a array which is initialized to an array, we use the setTodo to\n\t// make changes to the todo array\n\n\t// this useState is just like a short term memory, which gets cleared when ever the page is refreshed\n\tconst [todo, setTodo] = useState([]);\n\tconst [input, setInput] = useState('');\n\n\t// when the app loads we are supposed to listen to the database and fetch the new data\n\tuseEffect(() => {\n\t\t// this code fires when the App.js loads (READING FROM THE DATABASE)\n\t\tdb.collection('todoList') \n\t\t\t.orderBy('timestamp', 'desc')  // data ordering method in the database\n\t\t\t.onSnapshot((snapshot) => {\n\t\t\t\t// this returns all the documents with in the collection name called \"todoList\"\n\t\t\t\t// console.log(snapshot.docs.map((doc) => doc.data()));\n\n\t\t\t\t// this returns all the documents with in the collection name called \"todoList\" with field name called \"todo\"\n\t\t\t\tconsole.log(snapshot.docs.map((doc) => doc.data().todo));\n\t\t\t\tsetTodo(snapshot.docs.map((doc) => doc.data().todo)); // here i extract the todo value from the object, which is a string basically, since out setTodo array accepts strings only to work, not objects\n\t\t\t});\n\t});\n\n\t// the below function runs when the \"Todo App\" button is clicked !!!\n\tconst addTodo = (event) => {\n\t\t// we are gonna add the value which was set in the input field back into the \"todo\"\n\t\t// array by appending to the array using the spread operator (...)\n\t\t// setTodo([...todo, input]);  // I commented this because I am using I am loading data from the firebase db in the code below\n\n\t\t// I am adding an object into the collection \"todoList\" because firebase deals with objects\n\t\tdb.collection('todoList').add({\n\t\t\ttodo: input,\n\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n\t\t});\n\n\t\tevent.preventDefault(); // STOPS the refreshing of the web page when clicked enter after filling thr input field\n\n\t\tsetInput(''); // we are emptying the input field just after clicking enter or the button\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Text Here ðŸ˜Š</h1>\n\n\t\t\t<form>\n\t\t\t\t{/* We are making use of material ui controls to make our stuff look pretty */}\n\t\t\t\t<FormControl>\n\t\t\t\t\t<InputLabel>Write a TODO</InputLabel>\n\t\t\t\t\t<Input value={input} onChange={(event) => setInput(event.target.value)} />\n\t\t\t\t</FormControl>\n\n\t\t\t\t{/* Button disabled if no input data present */}\n\t\t\t\t<Button disabled={!input} variant=\"contained\" type=\"submit\" onClick={addTodo} color=\"primary\">\n\t\t\t\t\tTodo App\n\t\t\t\t</Button>\n\t\t\t</form>\n\n\t\t\t<ul>\n\t\t\t\t{todo.map((element) => (\n\t\t\t\t\t<Todo text={element} />\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}